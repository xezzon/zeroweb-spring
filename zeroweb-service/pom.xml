<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.github.xezzon</groupId>
    <artifactId>zeroweb</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>zeroweb-service</artifactId>
  <packaging>pom</packaging>

  <name>${project.groupId}:${project.artifactId}</name>
  <description>ZeroWeb 微服务构件</description>

  <modules>
    <module>zeroweb-service-admin</module>
    <module>zeroweb-service-open</module>
  </modules>

  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- 应用端口号 -->
    <app.port>8080</app.port>
    <grpc.port>9090</grpc.port>
    <!-- JavaAgent 存放路径 -->
    <agent-extraction-root>${maven.multiModuleProjectDirectory}/agent</agent-extraction-root>
    <!-- JavaAgent 在Docker中的路径 -->
    <agent-path>/opt/agent</agent-path>
    <workdir>/app</workdir>
    <docker.host>${env.DOCKER_REGISTRY}</docker.host>
    <!-- JavaAgent 名称 -->
    <opentelemetry-javaagent.name>opentelemetry-javaagent-2.4.0.jar</opentelemetry-javaagent.name>
    <otel-ali-extension.name>ot-java-agent-extension-1.28.0.jar</otel-ali-extension.name>
    <!-- Testcontainers -->
    <testcontainers.postgresql.url>jdbc:tc:postgresql:16-alpine:///postgres</testcontainers.postgresql.url>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.github.xezzon</groupId>
      <artifactId>zeroweb-spring-boot-starter</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <!-- web 相关 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    </dependency>
    <dependency>
      <groupId>cn.dev33</groupId>
      <artifactId>sa-token-spring-boot3-starter</artifactId>
    </dependency>
    <!-- 数据库相关 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
    </dependency>
    <!-- 工具类 -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.therapi</groupId>
      <artifactId>therapi-runtime-javadoc</artifactId>
      <version>${therapi-runtime-javadoc.version}</version>
    </dependency>
    <!-- 运维相关 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <!-- 测试相关 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- 代码生成 -->
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct-processor</artifactId>
      <version>${mapstruct.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.hibernate.orm</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.therapi</groupId>
      <artifactId>therapi-runtime-javadoc-scribe</artifactId>
      <version>${therapi-runtime-javadoc.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <parameters>true</parameters>  <!-- 使用该配置，@RequestParam 会默认以字段名作为 value 属性的值 -->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <plugin>
        <groupId>io.github.xezzon</groupId>
        <artifactId>smart-doc-maven-plugin</artifactId>
        <version>${smart-doc-maven-plugin.version}</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>html</report>
              <report>grpc-html</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <profiles>
    <profile>
      <!-- 发布微服务应用时使用的配置。 -->
      <id>docker</id>
      <build>
        <plugins>
          <!-- 使用 jib-maven-plugin 将微服务发布到 Docker registry -->
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>deploy-image</id>
                <phase>deploy</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <from>
                <platforms>
                  <platform>
                    <architecture>amd64</architecture>
                    <os>linux</os>
                  </platform>
                  <platform>
                    <architecture>arm64</architecture>
                    <os>linux</os>
                  </platform>
                </platforms>
              </from>
              <to>
                <image>${docker.host}/${project.artifactId}:${project.version}</image>
              </to>
              <container>
                <environment>
                  <OTEL_EXPORTER_OTLP_PROTOCOL>grpc</OTEL_EXPORTER_OTLP_PROTOCOL>
                  <OTEL_SERVICE_NAME>${project.artifactId}</OTEL_SERVICE_NAME>
                  <OTEL_SDK_DISABLED>true</OTEL_SDK_DISABLED>
                  <OTEL_JAVA_EXTENSIONS>${agent-path}/${otel-ali-extension.name}</OTEL_JAVA_EXTENSIONS>
                </environment>
                <ports>
                  <port>${app.port}</port>
                  <port>${grpc.port}</port>
                </ports>
                <volumes>
                  <volume>${workdir}/resources</volume>
                  <volume>${agent-path}</volume>
                </volumes>
                <jvmFlags>
                  <jvmFlag>-javaagent:${agent-path}/${opentelemetry-javaagent.name}</jvmFlag>
                </jvmFlags>
                <appRoot>${workdir}</appRoot>
                <workingDirectory>${workdir}</workingDirectory>
                <format>Docker</format>
              </container>
              <extraDirectories>
                <paths>
                  <path>
                    <from>${agent-extraction-root}</from>
                    <into>${agent-path}</into>
                  </path>
                </paths>
              </extraDirectories>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- 未指定测试数据库类型时，默认使用 PostgreSQL，使用该配置方便开发者本地运行单元测试。 -->
      <id>default-test-db</id>
      <activation>
        <property>
          <name>!db.type</name>
        </property>
      </activation>
      <properties>
        <db.type>postgresql</db.type>
        <db.url>${testcontainers.postgresql.url}</db.url>
      </properties>
    </profile>
    <profile>
      <!-- 使用 PostgreSQL 数据库进行单元测试时使用的配置文件 -->
      <id>postgresql</id>
      <activation>
        <property>
          <name>db.type</name>
          <value>postgresql</value>
        </property>
      </activation>
      <properties>
        <db.type>postgresql</db.type>
        <db.url>${testcontainers.postgresql.url}</db.url>
      </properties>
    </profile>
    <profile>
      <!-- 使用 MySQL 数据库进行单元测试时使用的配置文件 -->
      <id>mysql</id>
      <activation>
        <property>
          <name>db.type</name>
          <value>mysql</value>
        </property>
      </activation>
      <properties>
        <db.type>mysql</db.type>
        <db.url>jdbc:tc:mysql:8:///test?TC_MY_CNF=mysql</db.url>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.testcontainers</groupId>
          <artifactId>mysql</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
